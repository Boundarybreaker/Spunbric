buildscript {
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
        maven {
            name = "FabricMC"
            url = "https://maven.fabricmc.net/"
        }
        maven {
            name = "Sponge"
            url = "https://repo.spongepowered.org/maven"
        }
    }
    dependencies {
        classpath "net.minecrell.licenser:net.minecrell.licenser.gradle.plugin:0.4.1"
        classpath "org.spongepowered:spongegradle:0.11.0-SNAPSHOT"
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.0.0'
    }
}

plugins {
    id "java"
    id "java-library"
    id "fabric-loom" version "0.2.5-SNAPSHOT"
    //id "net.kyori.blossom" version "1.1.0"
}

apply plugin: 'com.github.johnrengelman.shadow'

subprojects {
    buildscript {
        repositories {
            mavenLocal()
            mavenCentral()
            jcenter()
            gradlePluginPortal()
            maven {
                url = "https://maven.fabricmc.net/"
            }
            maven {
                url = "https://repo.spongepowered.org/maven"
            }
        }
        dependencies {
            classpath "net.minecrell.licenser:net.minecrell.licenser.gradle.plugin:0.4.1"
            classpath "org.spongepowered:spongegradle:0.11.0-SNAPSHOT"

        }
    }
}


//apply plugin: "org.spongepowered.gradle.sponge.dev"
//apply plugin: "org.spongepowered.gradle.sponge.deploy"
//apply plugin: "org.spongepowered.gradle.sort"

subprojects {
    //apply plugin: "org.spongepowered.gradle.sponge.dev"
}

logger.lifecycle("""
   Starting Spunbric build. 
""")

//def apiProj = project(":SpongeAPI")
def loaderVersion = "0.6.3+build.167"
def yarnMappings = "1.14.4+build.12"
def apiVersion = "0.3.2+build.218-1.14"

repositories {
    maven {
        name = "Sponge"
        url = "https://repo.spongepowered.org/maven"
    }
}

dependencies {
    // Loom stuff
    minecraft("com.mojang:minecraft:${project.minecraftVersion}")
    mappings("net.fabricmc:yarn:$yarnMappings")
    modCompile("net.fabricmc:fabric-loader:$loaderVersion")

    // TODO Only include absolute minimum for fabric api and helper situations
    modCompile("net.fabricmc.fabric-api:fabric-api:$apiVersion")

    // Configurate
    api("org.spongepowered:configurate-core:3.6.1") {
        //exclude group = 'com.google.guava', module = 'guava'
        //exclude group = 'org.checkerframework', module = 'checker-qual' // We use our own version
    }
    api("org.spongepowered:configurate-hocon:3.6.1") {
    }

    api("org.spongepowered:configurate-gson:3.6.1") {
        //exclude group = 'com.google.code.gson', module = 'gson' // We have the same version technically, but use the gson we provide.
    }
    api("org.spongepowered:configurate-yaml:3.6.1")

    // SpongeAPI
    shadow(project(":SpongeAPI"))
}

shadowJar {
    classifier = "shadow"
    configurations = [project.configurations.shadow]
}

task remapJar(type: net.fabricmc.loom.task.RemapJarTask, overwrite: true) {
    dependsOn shadowJar
    //from zipTree(shadowJar.archiveFile)
    //	input = shadowJar.archiveFile
    //	classifier = "release"
    //output = file("build/libs/${project.buildDir.absolutePath}/libs/${archivesBaseName}-${project.version}.jar")
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

task jar(type: Jar, overwrite: true) {
    classifier = "compile"
    from compileJava
    from processResources
}

/*blossom {
    replaceToken 'MINECRAFT_VERSION', project.minecraftVersion
    replaceToken '%MINECRAFT_PROTOCOL_MAGIC%', project.minecraftProtocolVersion
}*/

group = "me.i509"
version = "1.0"
minecraftVersion = "1.14.4"
minecraftProtocolVersion = "498"
